#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
List of routines to analyze rice heterosis datasets. Starting from a list of
.count files. The .count files are generated by HT-seq.
"""

import os.path as op
import sys

import numpy as np
from collections import defaultdict

from jcvi.formats.base import BaseFile
from jcvi.apps.base import OptionParser, ActionDispatcher, debug, glob
debug()


class RiceSample (BaseFile):
    """
    Examples:
    1. LCS48-3_GTCCGC_L006_R_tophat_accepted_hits.count
    2. RF18-1_GTTTCG_L003_R_tophat_accepted_hits.count

    First letter is always tissue: L - leaf, R - root
    Next componet before dash is sample name:
    CS48 (9311)  is parent for F, CS66 (nipponbare) is parent for C
    Each family has a sequential id, in the second example, family ID is 18. Two
    parents for that family is F (CS48) and 18, hybrid progeny is F18.
    """
    def __init__(self, filename):
        super(RiceSample, self).__init__(filename)
        name = op.basename(filename).split("_")[0]
        name, rep = name.split("-")
        tissue, ind = name[0], name[1:]
        self.tissue, self.ind = tissue, ind
        self.rep = rep
        if ind in ("CS48", "CS66"):
            self.label = "P1"
            self.family = "Recurring"
        elif ind[0] in ("F", "C"):
            self.label = "F1"
            self.P1 = "CS48" if ind[0] == "F" else "CS66"
            self.P2 = ind[1:]
            self.family = int(ind[1:])
        else:
            self.label = "P2"
            self.family = int(ind)

        fp = open(filename)
        data = [row.split() for row in fp]
        self.header, self.data = zip(*data)
        self.data = np.array(self.data, dtype=np.int32)


    def __str__(self):
        return "\t".join(str(x) for x in (self.filename, self.tissue,
                          self.label, self.family))


def main():

    actions = (
        ('prepare', 'parse list of count files and group per family'),
            )
    p = ActionDispatcher(actions)
    p.dispatch(globals())


def prepare(args):
    """
    %prog prepare countfolder

    Parse list of count files and group per family.
    """
    p = OptionParser(prepare.__doc__)
    opts, args = p.parse_args(args)

    if len(args) != 1:
        sys.exit(not p.print_help())

    folder, = args
    countfiles = glob(op.join(folder, "*count*"))
    countsdb = defaultdict(list)
    for c in countfiles:
        rs = RiceSample(c)
        countsdb[rs.ind].append(rs)

    for ind, rs in sorted(countsdb.items()):
        print "*" * 10 , ind
        print "\n".join(str(x) for x in rs)


if __name__ == '__main__':
    main()
