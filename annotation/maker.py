#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
Utility script for annotations based on MAKER.
"""

import os.path as op
import sys

from collections import defaultdict
from optparse import OptionParser

from jcvi.apps.base import ActionDispatcher, need_update, popen, debug
debug()


def main():

    actions = (
        ('datastore', 'generate a list of gff filenames to merge'),
        ('split', 'split MAKER models by checking against evidences'),
            )
    p = ActionDispatcher(actions)
    p.dispatch(globals())


def get_splits(split_bed, gff_file, parents, key):
    """
    Use intersectBed to find the fused gene => split genes mappings.
    """
    opr = parents.replace(",", "") + ".bed"
    bed_opts = ["--type=" + parents, "--key=" + key]
    parents_bed = ".".join((gff_file.split(".")[0], opr))

    if need_update(gff_file, parents_bed):
        bed([gff_file, "--outfile={0}".format(parents_bed)] + bed_opts)

    cmd = "intersectBed -a {0} -b {1} -wao".format(split_bed, parents_bed)
    cmd += " | cut -f4,10"
    p = popen(cmd)
    splits = defaultdict(set)
    for row in p:
        a, b = row.split()
        splits[a].add(b)

    return splits


def split(args):
    """
    %prog split split.bed evidences.bed predictor1.gff predictor2.gff

    Split MAKER models by checking against predictors (such as AUGUSTUS and
    FGENESH). For each region covered by a working model. Find out the
    combination of predictors that gives the best accuracy against evidences
    (such as PASA).

    `split.bed` can be generated by pulling out subset from a list of ids
    $ python -m jcvi.apps.setop join list working.bed
        --column=0,3 --noheader | cut -f2-7 > split.bed
    """
    from jcvi.formats.gff import make_index, bed
    from jcvi.formats.bed import Bed

    p = OptionParser(split.__doc__)
    p.add_option("--key", default="Name",
            help="Key in the attributes to extract predictor.gff [default: %default]")
    p.add_option("--parents", default="match",
            help="list of features to extract, use comma to separate (e.g."
            "'gene,mRNA') [default: %default]")
    p.add_option("--children", default="match_part",
            help="list of features to extract, use comma to separate (e.g."
            "'five_prime_UTR,CDS,three_prime_UTR') [default: %default]")
    opts, args = p.parse_args(args)

    if len(args) != 4:
        sys.exit(not p.print_help())

    split_bed, evidences_bed, p1_gff, p2_gff = args
    parents = opts.parents
    children = opts.children
    key = opts.key

    splitmodels = Bed(split_bed).order

    s1 = get_splits(split_bed, p1_gff, parents, key)
    s2 = get_splits(split_bed, p2_gff, parents, key)


def datastore(args):
    """
    %prog datastore datastore.log > gfflist.log

    Generate a list of gff filenames to merge. The `datastore.log` file can be
    generated by something like:

    $ find
    /usr/local/scratch/htang/EVM_test/gannotation/maker/1132350111853_default/i1/
    -maxdepth 4 -name "*datastore*.log" > datastore.log
    """
    p = OptionParser(datastore.__doc__)
    opts, args = p.parse_args(args)

    if len(args) != 1:
        sys.exit(not p.print_help())

    ds, = args
    fp = open(ds)
    for row in fp:
        fn = row.strip()
        assert op.exists(fn)
        pp, logfile = op.split(fn)
        flog = open(fn)
        for row in flog:
            ctg, folder, status = row.split()
            if status != "FINISHED":
                continue

            gff_file = op.join(pp, folder, ctg + ".gff")
            assert op.exists(gff_file)
            print gff_file


if __name__ == '__main__':
    main()
